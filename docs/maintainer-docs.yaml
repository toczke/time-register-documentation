openapi: 3.0.0
info:
  title: Time Management API
  description: API documentation for Time Management Application
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server
  - url: https://api.tczke.ovh
    description: Preproduction development server

paths:
  /api/auth/register:
    post:
      summary: Register a new user (manual activation)
      tags:
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                WWID:
                  type: string
                  minLength: 8
                  maxLength: 8
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
                  pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$"
                  description: >
                    Minimum 8 characters. Must include one uppercase letter,
                    one lowercase letter, one number, and one special character.
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Bad Request
        "409":
          description: Conflict
        "500":
          description: Internal Server Error

  /api/auth/login:
    post:
      summary: Login to the application
      tags:
        - Authorization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                emailOrWWID:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful, returns JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT token for authentication
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - Account disabled or 2FA required
        "500":
          description: Internal Server Error

  /api/auth/change-password:
    post:
      summary: Change user password
      tags:
        - Authorization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
                confirmPassword:
                  type: string
      responses:
        "200":
          description: Password updated successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error

  /api/auth/refresh-token:
    post:
      summary: Refresh access token using refresh token
      tags:
        - Authorization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        "200":
          description: New access token generated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: New JWT access token
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error

  /api/auth/logout:
    post:
      summary: Logout user and invalidate all tokens
      tags:
        - Authorization
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Logged out successfully
        "500":
          description: Internal Server Error

  /api/auth/enable-2fa:
    post:
      summary: Enable Two-Factor Authentication (2FA)
      tags:
        - Authorization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                secret:
                  type: string
                  description: Base32-encoded secret for 2FA
                code:
                  type: string
                  description: Two-Factor Authentication code from authenticator app
      responses:
        "200":
          description: Two-Factor Authentication enabled successfully
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error

  /api/auth/validate-2fa:
    post:
      summary: Validate Two-Factor Authentication (2FA) code
      tags:
        - Authorization
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                code:
                  type: string
                  description: Two-Factor Authentication code from authenticator app
              required:
                - code
      responses:
        "200":
          description: Successfully validated 2FA code and issued JWT token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: JWT access token
        "400":
          description: Invalid 2FA token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        "404":
          description: 2FA setup not found for user
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Error message

  /api/user/details:
    get:
      summary: Get User Details
      description: Retrieve details of the authenticated user.
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response with user details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

    put:
      summary: Update User Details
      description: Update details for the authenticated user.
      tags:
        - User
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetails"
      responses:
        "200":
          description: User details updated successfully
        "404":
          description: User details not found or no changes applied
        "500":
          description: Internal Server Error

  /api/user/time-entries:
    post:
      summary: Create a new time entry
      description: Adds a new time entry for the authenticated user.
      tags:
        - User Time Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TimeEntry"
      responses:
        "201":
          description: Time entry created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeEntry"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error
    put:
      summary: Modify an existing time entry
      description: Updates an existing time entry for the authenticated user.
      tags:
        - User Time Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                hours:
                  type: number
                  format: float
                type:
                  type: string
                  enum:
                    - regular
                    - overtime
                    - vacation
                    - sick_leave
                    - holiday
              required:
                - id
                - hours
                - type
      responses:
        "200":
          description: Time entry updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TimeEntry"
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: Time entry not found or unauthorized
        "500":
          description: Internal Server Error
    delete:
      summary: Delete a time entry
      description: Removes a time entry for the authenticated user.
      tags:
        - User Time Management
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
              required:
                - id
      responses:
        "200":
          description: Time entry deleted successfully
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "404":
          description: Time entry not found or unauthorized
        "500":
          description: Internal Server Error
    get:
      summary: Get time entries report
      description: Retrieves a report of time entries for the authenticated user based on various filters.
      tags:
        - User Time Management
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          required: false
          description: The start date for the date range filter.
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          required: false
          description: The end date for the date range filter.
        - in: query
          name: year
          schema:
            type: integer
          required: false
          description: The year for the year and week or year and month filter.
        - in: query
          name: week
          schema:
            type: integer
          required: false
          description: The week number for the year and week filter.
        - in: query
          name: month
          schema:
            type: integer
          required: false
          description: The month number for the year and month filter.
        - in: query
          name: detailed
          schema:
            type: boolean
          required: false
          description: If true, the response will be detailed day-by-day. If false, it will be aggregated.
      responses:
        "200":
          description: Time entries retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date
                    totalHours:
                      type: number
                      format: float
                      description: The total hours for the date (if detailed is false).
                    types:
                      type: array
                      items:
                        type: object
                        properties:
                          type:
                            type: string
                            enum:
                              - regular
                              - overtime
                              - vacation
                              - sick_leave
                              - holiday
                          hours:
                            type: number
                            format: float
                            description: The hours for this type (if detailed is true).
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "500":
          description: Internal Server Error

  /api/user/leave-request:
    post:
      tags:
        - User Leave Management
      security:
        - bearerAuth: []
      summary: Request a leave
      description: Allows a user to request a leave by specifying multiple dates.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                leaveType:
                  type: string
                  example: "Vacation leave - standard (UoP)"
                dates:
                  type: array
                  items:
                    type: string
                    format: date
                    example: "2024-12-12"
                  description: |
                    An array of dates for which the leave is requested. Each date will be treated as a separate leave request.
                comment:
                  type: string
                  example: "Vaction leave"
      responses:
        201:
          description: Leave request created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Leave request(s) submitted successfully"
                  leaveRequests:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "123"
                        userId:
                          type: string
                          example: "1"
                        leaveType:
                          type: string
                          example: "vacation"
                        date:
                          type: string
                          format: date
                          example: "2023-08-01"
                        status:
                          type: string
                          example: "pending"
                        comment:
                          type: string
                          example: "Going on a family trip"
        400:
          description: Bad request due to invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid leave type or missing required fields"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal Server Error"
    # put:
    #   summary: Update an existing leave request
    #   description: Updates an existing leave request based on the provided leave request ID and other fields. Only pending requests can be modified, and the modifications are restricted to specific leave dates, comments, and leave type.
    #   tags:
    #     - User Leave Management
    #   security:
    #     - bearerAuth: []
    #   requestBody:
    #     description: Data to update the leave request. Only the owner of the request can modify it, and only if the request is pending.
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           type: object
    #           properties:
    #             leaveRequestId:
    #               type: integer
    #               description: The ID of the leave request to update
    #             leaveType:
    #               type: string
    #               description: The type of leave
    #             comment:
    #               type: string
    #               description: Comment about the leave request
    #             dates:
    #               type: array
    #               items:
    #                 type: string
    #                 format: date
    #               description: Specific dates for the leave
    #           required:
    #             - leaveRequestId
    #           example:
    #             leaveRequestId: 1
    #             leaveType: vacation
    #             comment: Going on a family trip
    #             dates:
    #               - "2024-07-31"
    #               - "2024-08-01"
    #   responses:
    #     "200":
    #       description: Leave request updated successfully
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: Leave request updated successfully
    #     "400":
    #       description: Bad Request, missing or invalid data
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: "Validation Error: Missing leaveRequestId"
    #     "401":
    #       description: Unauthorized, JWT missing or invalid
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: Unauthorized access
    #     "403":
    #       description: Forbidden, only the owner of the leave request can modify it or the request is not in a pending state
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: '"Only pending requests can be modified" or "Not authorized to modify this request"'
    #     "404":
    #       description: Not Found, leave request not found
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    #             properties:
    #               message:
    #                 type: string
    #                 example: Leave request not found

    get:
      tags:
        - User Leave Management
      security:
        - bearerAuth: []
      summary: Get user leave requests
      description: Retrieve a list of leave requests made by the authenticated user
      parameters:
        - name: status
          in: query
          description: Filter by leave request status
          required: false
          schema:
            type: string
            enum: [pending, accepted, rejected]
            example: pending
        - name: startDate
          in: query
          description: Filter leave requests by start date (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: Filter leave requests by end date (YYYY-MM-DD)
          required: false
          schema:
            type: string
            format: date
        - name: leaveType
          in: query
          description: Filter by leave type
          required: false
          schema:
            type: string
      responses:
        200:
          description: A list of leave requests
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "123"
                    userId:
                      type: string
                      example: "1"
                    leaveType:
                      type: string
                      example: "vacation"
                    startDate:
                      type: string
                      format: date
                      example: "2023-08-01"
                    endDate:
                      type: string
                      format: date
                      example: "2023-08-10"
                    status:
                      type: string
                      example: "pending"
                    comment:
                      type: string
                      example: "Going on a family trip"
        404:
          description: No leave requests found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No leave requests found for this user"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal Server Error"

  /api/user/leave-request/{leaveRequestId}:
    delete:
      summary: Delete a leave request
      description: Deletes a leave request if its status is pending or rejected. The user must be the same as the user who created the leave request.
      tags:
        - User Leave Management
      security:
        - bearerAuth: []
      parameters:
        - name: leaveRequestId
          in: path
          required: true
          description: ID of the leave request to be deleted
          schema:
            type: integer
      responses:
        "200":
          description: Successfully deleted leave request
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message
        "400":
          description: Bad request
        "403":
          description: Forbidden - Not authorized to delete the leave request
        "404":
          description: Not found - Leave request or user not found
        "500":
          description: Internal server error

  /api/user/leave-pool:
    get:
      summary: Get User Leave Pools
      description: Retrieves the leave pools for the authenticated user, with optional filters for leave type and year.
      tags:
        - User Leave Management
      security:
        - bearerAuth: []
      operationId: getUserLeavePools
      parameters:
        - name: leaveTypeId
          in: query
          required: false
          description: The ID of the leave type to filter by.
          schema:
            type: integer
        - name: year
          in: query
          required: false
          description: The year to filter leave pools by.
          schema:
            type: integer
      responses:
        "200":
          description: Successful retrieval of leave pools.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: integer
                      description: The ID of the user.
                    leaveTypeID:
                      type: integer
                      description: The ID of the leave type.
                    year:
                      type: integer
                      description: The year of the leave pool.
                    pendingDays:
                      type: integer
                      description: The number of pending leave days.
                    remainingDays:
                      type: integer
                      description: The number of remaining leave days.
                    totalDays:
                      type: integer
                      description: The total number of leave days.
        "400":
          description: Bad Request. Invalid parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid parameters"
        "404":
          description: Not Found. User or leave pool not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Leave pool not found"
        "500":
          description: Internal Server Error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Internal server error"

  /api/tl/add-user:
    post:
      summary: Add a new user
      description: Endpoint for team leaders to add a new user to the system. Requires JWT authentication. The team ID is taken from the JWT.
      security:
        - bearerAuth: []
      tags:
        - Team Leader
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - firstName
                - lastName
                - email
                - WWID
              properties:
                firstName:
                  type: string
                  example: Jan
                  description: First name of the new user
                lastName:
                  type: string
                  example: Kowalski
                  description: Last name of the new user
                email:
                  type: string
                  format: email
                  example: kowalski.janx@intel.com
                  description: Email address of the new user
                WWID:
                  type: string
                  example: 12345678
                  description: WWID of the new user
      responses:
        201:
          description: User added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User added
                  login:
                    type: string
                    example: "Email: john.doe@example.com, WWID: 12345678"
                  password:
                    type: string
                    example: GeneratedPassword123!
                  role:
                    type: string
                    example: user
                  team:
                    type: string
                    example: none
        400:
          description: Bad Request - Missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: WWID is required
        409:
          description: Conflict - WWID or email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: WWID or email already exists
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

  /api/tl/users:
    get:
      tags:
        - Team Leader
      summary: View details of users in the team
      description: Retrieve details of all users in the same team as the team leader.
      security:
        - bearerAuth: []
      parameters:
        - name: isActive
          in: query
          description: Filter users by active status. Use "true" or "false".
          required: false
          schema:
            type: string
            enum: [true, false]
        - name: detailed
          in: query
          description: Get detailed information of users. Use "true" for detailed response.
          required: false
          schema:
            type: string
            enum: [true, false]
      responses:
        "200":
          description: A list of users in the team.
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        WWID:
                          type: string
                          example: "912345678"
                        email:
                          type: string
                          example: "user@example.com"
                        firstName:
                          type: string
                          example: "John"
                        lastName:
                          type: string
                          example: "Doe"
                        role:
                          type: string
                          example: "user"
                        team:
                          type: string
                          example: "lab"
                        isActive:
                          type: string
                          example: "active"
                        sex:
                          type: string
                          example: "male"
                        addressStreet:
                          type: string
                          example: "123 Main St"
                        addressPostCode:
                          type: string
                          example: "00-123"
                        addressCity:
                          type: string
                          example: "Warsaw"
                        addressCountry:
                          type: string
                          example: "Poland"
                        phoneNumber:
                          type: string
                          example: "+48123456789"
                        alternativeEmail:
                          type: string
                          example: "john.doe@example.com"
                        dateOfBirth:
                          type: string
                          format: date
                          example: "1980-01-01"
                        nationality:
                          type: string
                          example: "Polish"
        "400":
          description: Invalid query parameter.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid isActive parameter. Use 'true' or 'false'."
        "404":
          description: No users found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No users found"
        "500":
          description: Internal server error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal Server Error"

  /api/tl/time-entries/report:
    get:
      summary: Retrieve team report
      description: Retrieve time entries for a team based on the provided date range or specific time period.
      tags:
        - Team Leader
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: The start date for the report (YYYY-MM-DD).
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: The end date for the report (YYYY-MM-DD).
        - in: query
          name: year
          schema:
            type: integer
          description: The year for the report.
        - in: query
          name: month
          schema:
            type: integer
          description: The month for the report.
        - in: query
          name: week
          schema:
            type: integer
          description: The week number for the report.
        - in: query
          name: userId
          schema:
            type: integer
          description: The ID of the user for whom the report is generated.
      responses:
        "200":
          description: A list of time entries for the team.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      description: The ID of the time entry.
                    userId:
                      type: integer
                      description: The ID of the user.
                    date:
                      type: string
                      format: date
                      description: The date of the time entry.
                    hours:
                      type: number
                      format: float
                      description: The number of hours logged.
                    description:
                      type: string
                      description: The description of the time entry.
                    firstName:
                      type: string
                      description: The first name of the user.
                    lastName:
                      type: string
                      description: The last name of the user.
                    email:
                      type: string
                      description: The email of the user.
                    teamName:
                      type: string
                      description: The name of the team.
        "400":
          description: Bad request.
        "401":
          description: Unauthorized. Invalid or expired token.
        "500":
          description: Internal server error.

  /api/tl/leave-request:
    get:
      tags:
        - Team Leader Leave Management
      security:
        - bearerAuth: []
      summary: Retrieve all team leave requests
      description: |
        Fetches leave requests for all team members of the team associated with the logged-in team leader. Optionally filters by user ID, status, and date range.
      parameters:
        - name: userId
          in: query
          description: Filter leave requests by a specific user ID
          required: false
          schema:
            type: integer
        - name: status
          in: query
          description: Filter leave requests by status (pending, accepted, rejected)
          required: false
          schema:
            type: string
            enum:
              - pending
              - accepted
              - rejected
        - name: startDate
          in: query
          description: "Filter leave requests starting from this date (format: YYYY-MM-DD)"
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: "Filter leave requests up to this date (format: YYYY-MM-DD)"
          required: false
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Successfully retrieved leave requests
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    userId:
                      type: integer
                      example: 1
                    leaveType:
                      type: string
                      example: vacation
                    status:
                      type: string
                      example: pending
                    comment:
                      type: string
                      example: Going on a family trip
                    createdAt:
                      type: string
                      format: date-time
                      example: "2024-07-30T12:34:56Z"
                    updatedAt:
                      type: string
                      format: date-time
                      example: "2024-07-30T12:34:56Z"
        "404":
          description: No leave requests found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: No leave requests found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error

    post:
      tags:
        - Team Leader Leave Management
      security:
        - bearerAuth: []
      summary: Resolve a leave request
      description: Accept or reject a leave request. If accepted, the leave request dates will be added as time entries for the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                leaveRequestId:
                  type: integer
                  description: The ID of the leave request to resolve
                status:
                  type: string
                  enum: [accepted, rejected]
                  description: The new status for the leave request
              required:
                - leaveRequestId
                - status
      responses:
        "200":
          description: Leave request status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "404":
          description: Leave request not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string

  /api/hr/users:
    get:
      summary: Get a list of active users
      tags:
        - HR
      security:
        - bearerAuth: []
      parameters:
        - name: team
          in: query
          description: Team to filter users by
          required: false
          schema:
            type: string
      responses:
        200:
          description: List of active users
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    name:
                      type: string
                    email:
                      type: string
                    team:
                      type: string
        500:
          description: Internal server error

  /api/hr/time-entries/report:
    get:
      summary: Get HR report
      tags:
        - HR
      security:
        - bearerAuth: []
      parameters:
        - name: startDate
          in: query
          description: Start date for the report
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for the report
          required: false
          schema:
            type: string
            format: date
        - name: year
          in: query
          description: Year for the report
          required: false
          schema:
            type: integer
        - name: month
          in: query
          description: Month for the report
          required: false
          schema:
            type: integer
        - name: week
          in: query
          description: Work week number for the report
          required: false
          schema:
            type: integer
        - name: userId
          in: query
          description: User ID for the report
          required: false
          schema:
            type: string
        - name: team
          in: query
          description: Team for the report
          required: false
          schema:
            type: string
      responses:
        200:
          description: HR report
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                    date:
                      type: string
                      format: date
                    hours:
                      type: integer
                    type:
                      type: string
                    userId:
                      type: string
                    team:
                      type: string
        500:
          description: Internal server error

  /api/hr/time-entries/report/user/{userId}:
    get:
      summary: Get time entries report for a specific user
      tags:
        - HR
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID for the report
          schema:
            type: string
        - name: startDate
          in: query
          description: Start date for the report
          required: false
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          description: End date for the report
          required: false
          schema:
            type: string
            format: date
        - name: year
          in: query
          description: Year for the report
          required: false
          schema:
            type: integer
        - name: month
          in: query
          description: Month for the report
          required: false
          schema:
            type: integer
        - name: week
          in: query
          description: Work week number for the report
          required: false
          schema:
            type: integer
        - name: detailed
          in: query
          description: Include detailed entries
          required: false
          schema:
            type: string
            enum: [true, false]
            default: false
      responses:
        200:
          description: User time entries report
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    date:
                      type: string
                      format: date
                    totalHours:
                      type: string
                    entries:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                          type:
                            type: string
                          hours:
                            type: string
                    types:
                      type: object
                      additionalProperties:
                        type: string
        400:
          description: Missing required filtering parameters
        500:
          description: Internal server error

  /api/hr/leave-request:
    get:
      summary: List all leave requests
      description: Retrieve a list of all leave requests, optionally filtered by user ID, status, start date, and end date.
      tags:
        - HR Leave Management
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: userId
          schema:
            type: integer
          description: Filter leave requests by user ID
        - in: query
          name: status
          schema:
            type: string
            enum:
              - accepted
              - rejected
              - pending
          description: Filter leave requests by status
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: "Filter leave requests that start on or after the specified date (format: YYYY-MM-DD)"
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: "Filter leave requests that end on or before the specified date (format: YYYY-MM-DD)"
      responses:
        "200":
          description: List of leave requests
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 7
                    userId:
                      type: integer
                      example: 1
                    leaveTypeName:
                      type: string
                      example: vacation
                    status:
                      type: string
                      example: accepted
                    comment:
                      type: string
                      example: "Family vacation"
                    createdAt:
                      type: string
                      format: date-time
                      example: 2024-06-15 10:30
                    updatedAt:
                      type: string
                      format: date-time
                      example: 2024-06-17 09:00
                    dates:
                      type: array
                      items:
                        type: string
                        format: date
                        example: 2024-07-30
                    days:
                      type: integer
                      example: 5
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

    post:
      summary: Resolve a leave request
      description: Allows a team leader or HR to accept or reject a leave request.
      tags:
        - HR Leave Management
      security:
        - bearerAuth: []
      requestBody:
        description: Leave request data for resolution
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                leaveRequestId:
                  type: integer
                  example: 7
                status:
                  type: string
                  enum:
                    - accepted
                    - rejected
                  example: accepted
              required:
                - leaveRequestId
                - status
      responses:
        "200":
          description: Leave request resolved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Leave request resolved successfully
        "400":
          description: Bad request due to validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: leaveRequestId and status are required
        "403":
          description: Forbidden due to authorization error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: You are not authorized to accept or reject leaves from other teams
        "404":
          description: Leave request or user not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Leave request not found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
                  details:
                    type: string
                    example: Error message

  /api/hr/leave-pool:
    post:
      summary: Assign leave pool to a user
      description: Assign a leave pool to a user for a specified leave type and year, transferring default days to total and remaining days.
      tags:
        - HR Leave Management
      security:
        - bearerAuth: []
      requestBody:
        description: Details for assigning leave pool
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 1
                leaveTypeId:
                  type: integer
                  example: 2
                year:
                  type: integer
                  example: 2024
              required:
                - userId
                - leaveTypeId
                - year
      responses:
        "201":
          description: Leave pool assigned successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Leave pool assigned successfully
        "400":
          description: Bad request due to validation errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: userId, leaveTypeId, and year are required
        "404":
          description: User or leave type not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

    get:
      summary: Get list of leave pools
      description: Retrieve a list of leave pools with optional filtering by userId, leaveTypeId, and year.
      tags:
        - HR Leave Management
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: query
          schema:
            type: integer
            example: 1
        - name: leaveTypeId
          in: query
          schema:
            type: integer
            example: 2
        - name: year
          in: query
          schema:
            type: integer
            example: 2024
      responses:
        "200":
          description: List of leave pools
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: integer
                      example: 1
                    leaveTypeId:
                      type: integer
                      example: 2
                    year:
                      type: integer
                      example: 2024
                    totalDays:
                      type: integer
                      example: 30
                    remainingDays:
                      type: integer
                      example: 15
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
  /api/hr/leave-pool/{userId}/{leaveTypeId}/{year}:
    put:
      summary: Modify an existing leave pool
      description: Update the total and remaining days for a user’s leave pool.
      tags:
        - HR Leave Management
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: leaveTypeId
          in: path
          required: true
          schema:
            type: integer
            example: 2
        - name: year
          in: path
          required: true
          schema:
            type: integer
            example: 2024
      requestBody:
        description: New values for total and remaining days
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                totalDays:
                  type: integer
                  example: 25
                remainingDays:
                  type: integer
                  example: 10
      responses:
        "200":
          description: Leave pool updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Leave pool updated successfully
                  leavePool:
                    type: object
                    properties:
                      userId:
                        type: integer
                        example: 1
                      leaveTypeId:
                        type: integer
                        example: 2
                      year:
                        type: integer
                        example: 2024
                      totalDays:
                        type: integer
                        example: 25
                      remainingDays:
                        type: integer
                        example: 10
        "404":
          description: Leave pool not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Leave pool not found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

    delete:
      summary: Delete a leave pool
      description: Delete a leave pool for a specific user, leave type, and year.
      tags:
        - HR Leave Management
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 1
        - name: leaveTypeId
          in: path
          required: true
          schema:
            type: integer
            example: 2
        - name: year
          in: path
          required: true
          schema:
            type: integer
            example: 2024
      responses:
        "200":
          description: Leave pool deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Leave pool deleted successfully
        "404":
          description: Leave pool not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Leave pool not found
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /api/admin/user:
    post:
      summary: Create a new user
      description: Creates a new user with the specified details and returns the login information and generated password.
      tags:
        - Admin
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                email:
                  type: string
                  example: john.doe@intel.com
                WWID:
                  type: string
                  example: 90000001
                roleId:
                  type: integer
                  example: 1
                teamId:
                  type: integer
                  example: 2
      responses:
        "200":
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created
                  login:
                    type: object
                    properties:
                      email:
                        type: string
                        example: john.doe@intel.com
                      WWID:
                        type: string
                        example: 90000001
                  password:
                    type: string
                    example: randomGeneratedPassword
                  role:
                    type: string
                    example: Admin
                  team:
                    type: string
                    example: Engineering
        "400":
          description: Invalid input
        "409":
          description: Conflict (e.g., email or WWID already exists)
        "500":
          description: Internal Server Error

  /api/admin/user/{userId}:
    put:
      summary: Update User Details
      description: Allows an admin to update the details of a specific user.
      tags:
        - Admin
      security:
        - bearerAuth: []
      operationId: updateUserDetailsAdmin
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            example: 2
          description: The ID of the user to update.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                roleIdentifier:
                  type: string
                  description: The role to assign to the user.
                  enum: [user, tl, hr, admin]
                  example: user
                activeStatus:
                  type: boolean
                  description: Whether the user is active (true) or inactive (false).
                  example: true
                sex:
                  type: string
                  enum: [male, female, other]
                  example: female
                addressStreet:
                  type: string
                  example: 5678 Maple Avenue
                addressPostCode:
                  type: string
                  example: 12345
                addressCity:
                  type: string
                  example: Springfield
                addressCountry:
                  type: string
                  example: USA
                phoneNumber:
                  type: string
                  example: +1987654321
                alternativeEmail:
                  type: string
                  format: email
                  example: jane.smith@example.com
                dateOfBirth:
                  type: string
                  format: date
                  example: 1990-05-15
                nationality:
                  type: string
                  example: Canadian
      responses:
        "200":
          description: User details updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User details updated successfully
        "400":
          description: Bad request due to missing or invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Invalid role identifier. Use "user", "tl", "hr", or "admin".'
        "404":
          description: User details not found or no changes applied
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User details not found or no changes applied
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error
    delete:
      summary: Delete a user
      tags:
        - Admin
      security:
        - bearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User deleted successfully
        "404":
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        "500":
          description: Internal Server Error
    get:
      summary: Get all users with optional filters
      description: Retrieves a list of users with optional filters for team, active status, and role.
      tags:
        - Admin
      parameters:
        - in: query
          name: team
          schema:
            type: string
          description: Filter users by team (lab, val, sas, none)
        - in: query
          name: isActive
          schema:
            type: boolean
          description: Filter users by active status (true or false)
        - in: query
          name: role
          schema:
            type: string
          description: Filter users by role (user, tl, hr, admin)
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Successful response with users data
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        firstName:
                          type: string
                        lastName:
                          type: string
                        email:
                          type: string
                        WWID:
                          type: string
                        roleId:
                          type: integer
                        role:
                          type: string
                        teamId:
                          type: integer
                        team:
                          type: string
                        isActive:
                          type: boolean
        "400":
          description: Invalid request parameters
        "401":
          description: Unauthorized - Missing or invalid bearer token
        "500":
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Role:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        roleName:
          type: string
          enum:
            - user
            - tl
            - hr
            - admin
      required:
        - roleName

    Team:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        teamName:
          type: string
          enum:
            - lab
            - val
            - sas
            - none
      required:
        - teamName

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        fullName:
          type: string
          readOnly: true
        WWID:
          type: string
          maxLength: 8
        email:
          type: string
          format: email
        password:
          type: string
          format: password
        roleId:
          type: integer
          format: int64
        teamId:
          type: integer
          format: int64
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time
          readOnly: true
        lastLogin:
          type: string
          format: date-time
          readOnly: true
        twoFactorEnabled:
          type: boolean
      required:
        - firstName
        - lastName
        - WWID
        - email
        - password
        - roleId
        - isActive

    UserDetails:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        userId:
          type: integer
          format: int64
        sex:
          type: string
          enum:
            - male
            - female
            - other
        addressStreet:
          type: string
        addressPostCode:
          type: string
        addressCity:
          type: string
        addressCountry:
          type: string
        phoneNumber:
          type: string
        alternativeEmail:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
        nationality:
          type: string
      required:
        - userId

    Token:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        userId:
          type: integer
          format: int64
        token:
          type: string
        expiresAt:
          type: string
          format: date-time
      required:
        - userId
        - token
        - expiresAt

    RefreshToken:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        userId:
          type: integer
          format: int64
        token:
          type: string
        expiresAt:
          type: string
          format: date-time
      required:
        - userId
        - token
        - expiresAt

    TimeEntry:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        userId:
          type: integer
          format: int64
          readOnly: true
        date:
          type: string
          format: date
        hours:
          type: number
          format: float
        type:
          type: string
          enum:
            - regular
            - overtime
            - vacation
            - sick_leave
            - holiday
      required:
        - date
        - hours
        - type

    Document:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        userId:
          type: integer
          format: int64
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        type:
          type: string
        minioS3Path:
          type: string
      required:
        - userId
        - startDate
        - endDate
        - type
        - minioS3Path

    TwoFactorAuth:
      type: object
      properties:
        id:
          type: integer
          format: int64
          readOnly: true
        userId:
          type: integer
          format: int64
        secret:
          type: string
        createdAt:
          type: string
          format: date-time
          readOnly: true
      required:
        - userId
        - secret
